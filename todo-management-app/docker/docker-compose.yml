version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:16
    container_name: todo-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tododb
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - todo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: todo-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: todo-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - todo-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: todo-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: todo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - todo-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:10.2.0
    container_name: todo-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - todo-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false

  # Application Services
  service-registry:
    build:
      context: ../service-registry
    container_name: todo-service-registry
    ports:
      - "8761:8761"
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  config-server:
    build:
      context: ../config-server
    container_name: todo-config-server
    ports:
      - "8888:8888"
    depends_on:
      service-registry:
        condition: service_healthy
    networks:
      - todo-network
    environment:
      EUREKA_HOST: service-registry
      EUREKA_PORT: 8761
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: ../user-service
    container_name: todo-user-service
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - todo-network
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: tododb
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_HOST: service-registry
      EUREKA_PORT: 8761
      CONFIG_SERVER_HOST: config-server
      CONFIG_SERVER_PORT: 8888
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  todo-service:
    build:
      context: ../todo-service
    container_name: todo-todo-service
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - todo-network
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: tododb
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_HOST: service-registry
      EUREKA_PORT: 8761
      CONFIG_SERVER_HOST: config-server
      CONFIG_SERVER_PORT: 8888
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: ../api-gateway
    container_name: todo-api-gateway
    ports:
      - "8765:8765"
    depends_on:
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
      user-service:
        condition: service_healthy
      todo-service:
        condition: service_healthy
    networks:
      - todo-network
    environment:
      EUREKA_HOST: service-registry
      EUREKA_PORT: 8761
      CONFIG_SERVER_HOST: config-server
      CONFIG_SERVER_PORT: 8888
      REDIS_HOST: redis
      REDIS_PORT: 6379
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8765/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  todo-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data: